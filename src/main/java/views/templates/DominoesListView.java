package views.templates;

import helpers.Screen;
import javafx.scene.Parent;
import models.classes.Domino;
import models.classes.DominoesList;

/**
 * JavaFX {@link javafx.scene.Node} managing the view of a {@link Domino} list.
 * This class manages the views of the entire list and allows group processing.
 * The generated view is a line of spaced Dominoes.
 *
 * @version 1.0
 * @since 2019-06-06
 */
public class DominoesListView extends Parent {

    private DominoesList dominoesList;

    /**
     * Generates the view of all dominoes.
     * It also centers this line on the screen.
     * This class simply retrieves the view generated by the {@link Domino} constructor and displays it for everyone.
     * @param dominoesList  List of dominoes to display.
     * @see DominoView
     */
    public DominoesListView(DominoesList dominoesList) {
        this.dominoesList = dominoesList;
        generateDominoesList();
        center();
    }

    /**
     * Adds the views of each {@link Domino} to the JavaFX {@link javafx.scene.Node} of the class.
     * @see DominoView
     */
    private void generateDominoesList() {
        for(int i = 0; i < this.dominoesList.size(); i++) {
            DominoView dominoView = this.dominoesList.get(i).getDominoView();
            dominoView.setTranslateX(Screen.percentageToXDimension(8.5 * i));
            this.getChildren().add(dominoView);
        }
    }

    /**
     * Displays the visible face of each {@link Domino}.
     * This is the face of the {@link Domino} where you can see the land type and the number of crowns of each {@link models.classes.LandPortion}.
     * @see DominoView#showPortionsFace()
     */
    public void showPortionsFaces() {
        for(int i = 0; i < this.dominoesList.size(); i++) {
            DominoView dominoView = this.dominoesList.get(i).getDominoView();
            dominoView.showPortionsFace();
        }
    }

    /**
     * Displays the number face of each {@link models.classes.Domino}.
     * This is the face of the {@link Domino} where you can see only it's number.
     * @see DominoView#showNumberFace()
     */
    public void showNumberFaces() {
        for(int i = 0; i < this.dominoesList.size(); i++) {
            DominoView dominoView = this.dominoesList.get(i).getDominoView();
            dominoView.showNumberFace();
        }
    }

    /**
     * Removes the {@link DominoView} from the graphic scene.
     * This results in deleting the Domino from the user's screen.
     * @param domino    Domino to delete from the graphic scene.
     */
    public void removeDominoView(Domino domino) {
        this.getChildren().remove(domino.getDominoView());
    }

    /**
     * Center the view ({@link DominoesListView}) on the screen.
     */
    private void center() {
        this.setTranslateX(Screen.percentageToXDimension(50 - 8.5 * dominoesList.size() / 2));
        this.setTranslateY(Screen.percentageToYDimension(50 - 2.5));
    }

    /**
     * Places the view ({@link DominoesListView}) in the lower part of the user's screen.
     */
    public void setLowerPosition() {
        this.setTranslateY(Screen.percentageToYDimension(50 - 5 - 4));
    }

    /**
     * Places the view ({@link DominoesListView}) in the upper part of the user's screen.
     */
    public void setUpperPosition() {
        this.setTranslateY(Screen.percentageToYDimension(50 - 5 + 4));
    }
}
